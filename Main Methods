import java.util.ArrayList;
import java.lang.StringBuilder;
/**
 * Write a description of class Main here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
public class Main
{
    // instance variables - replace the example below with your own
    private String plaintext, str;
    private String ciphertext = "";
    StringBuilder sb1 = new StringBuilder(ciphertext);
    int b;
    char c;
    int key;
    private String error = "You entered non-textual input >:(";
    /**
     * This is the ROT13 cipher: a Caesar shift that works with no key because it always moves 13 characters ahead. 
     * Same to encipher and decipher. 
     */
    public String rot(String str)
    {
        plaintext = str;
        ArrayList ab1 = new ArrayList(); 
        ab1.add('a'); 
        ab1.add('b'); 
        ab1.add('c'); 
        ab1.add('d');
        ab1.add('e');
        ab1.add('f');
        ab1.add('g');
        ab1.add('h');
        ab1.add('i');
        ab1.add('j');
        ab1.add('k');
        ab1.add('l');
        ab1.add('m'); 
        ArrayList ab2 = new ArrayList(); 
        ab2.add('n'); 
        ab2.add('o'); 
        ab2.add('p'); 
        ab2.add('q');
        ab2.add('r');
        ab2.add('s');
        ab2.add('t');
        ab2.add('u');
        ab2.add('v');
        ab2.add('w');
        ab2.add('x');
        ab2.add('y');
        ab2.add('z'); 
        for (int i = 0; i< str.length(); i++)
        {
            if(ab1.contains(str.charAt(i)))
            {
               c = str.charAt(i);
               b = ab1.indexOf(c);
               sb1.append(ab2.get(b));
              }
            else 
            if(ab2.contains(str.charAt(i))){
               c = str.charAt(i);
               b = ab1.indexOf(c);
               sb1.append(ab1.get(b));
            }
            else 
            {
             return error;
             }
        }
        return ciphertext;
   }
   public String atbash(String str)
   {//this is the atbash cipher, which substitutes the first thirteen letters and the last thirteen letters.
        ArrayList ab1 = new ArrayList(); 
        ab1.add('a'); 
        ab1.add('b'); 
        ab1.add('c'); 
        ab1.add('d');
        ab1.add('e');
        ab1.add('f');
        ab1.add('g');
        ab1.add('h');
        ab1.add('i');
        ab1.add('j');
        ab1.add('k');
        ab1.add('l');
        ab1.add('m'); 
        ab1.add('n'); 
        ab1.add('o'); 
        ab1.add('p'); 
        ab1.add('q');
        ab1.add('r');
        ab1.add('s');
        ab1.add('t');
        ab1.add('u');
        ab1.add('v');
        ab1.add('w');
        ab1.add('x');
        ab1.add('y');
        ab1.add('z'); 
        for (int i = 0; i< str.length(); i++)
        {
            c = str.charAt(i);
            b = 25 - ab1.getIndexOf(c);
            sb1.append(ab1.get(b));
        }
        return ciphertext;
    }
